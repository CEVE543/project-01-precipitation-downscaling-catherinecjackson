---
title: "Project 1"
subtitle: "Downscaling: Comparison of Quantile-Quantile Mapping and Lab 06 Methodology"
jupyter: julia-1.9
date: 2023-11-13
author: "Catherine Jackson (ccj3)"

number-sections: true
code-annotations: hover

kind: "Project"
Module: "1"
categories:
    - "Module 3"
    - "Projects"

format:
    html: 
        toc-depth: 3
    docx: 
        toc: true
        toc-depth: 3
        fig-format: png
---

# Intro

```{julia}
using Plots
using StatsBase
using StatsPlots
using Distributions
using Statistics
```


# Quantile Quantile Mapping
Quantile-Quantile Mapping, or Q-Q Mapping, can be used to downscale climate data. This method is used to adjust the distribution of a variable to match the distribution of another variable. In this case, we are using Q-Q Mapping to adjust the distribution of the precipitation data to match the observed temperature data.  Temperature data tends to be smoother and more reliable than precipitation data, so we are using the temperature data as a reference to adjust the precipitation data.

## Methodology
The Q-Q Mapping methodology is as follows:
1. Calculate the cumulative distribution function (CDF) of the observed temperature data and the CDF of the precipitation data.
    We know that the CDF returns the probabilities of X being less than or equal to some value x.
    $$
    Pr(X \leq x) = F(x)
    $$
2. Calculate the inverse of the CDF of the observed temperature data and the inverse of the CDF of the precipitation data.
    The inverse CDF can also be called the quantile function, and it can take this CDF and give us values for the quantiles we want!  It can be represented with the following equation:
    $$
    F^{-1}(p) = x
    $$
    It can also be conceptualized as choosing a value you want on the y axis (e.g. the 0.9 quantile or 90% probability of being less than the value x), tracing over to the graph until you hit the CDF, and then moving down to the x axis to find your value of x that corresponds to the 0.9 quantile.
3. Use the inverse of the CDF of the observed temperature data to transform the precipitation data to match the observed temperature data.


## Implementation
The Q-Q Mapping methodology was implemented in Julia using the following code:

```{julia}

precipitation = [2,6,2,3,4,5,8,5,6,6,7,13,9,12,9,10,10,10,11,11,11,12,12,12,13]
temperature = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
function qqmap(precipitation::AbstractVector{<:Real}, temperature::AbstractVector{<:Real})
    cdf_precipitation = ecdf(precipitation)
    cdf_temperature = ecdf(temperature)
    adjusted_precip_data = [quantile(temperature, cdf_precipitation(x)) for x in precipitation]
    return adjusted_precip_data
end
newprecipitation = qqmap(precipitation, temperature)
compplot = plot(precipitation)
compplot = plot!(newprecipitation)
```

# Lab 06: PCA and kNN


## Methodology
The Lab 06 methodology is as follows:
1. Calculate the principal components of the observed temperature data.
2. Utilize the k-Nearest Neighbors algorithm to find the k nearest neighbors of the observed temperature data.
3. Use the k nearest neighbors of the observed temperature data to predict the precipitation data.

## Implementation
The Lab 06 methodology was implemented in Julia using the following code:

```{julia}